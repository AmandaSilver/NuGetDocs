@using NuGet.Docs
@helper RenderDocumentationIndex()
{
// Normalize the heading levels to start at 3 in the TOC.
const int minHeading = 3;
// Maximum depth of the index topic-tree
const int maxLevels = 3;

var topics = Topic.GetTopicsWithSubTopics("~/docs");
var orderedList = new List<Topic>();
orderedList.Add(topics.Where(
(a) => { return a.Title == "Get Started"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Tools"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Schema"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "API"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Host"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Topics"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Contribute"; }).First());
    @RenderIndexTopics(orderedList, minHeading, minHeading + maxLevels);

}

@helper RenderIndexTopics(IEnumerable<Topic> topics, int level, int maxDepth)
{
foreach (Topic topic in topics)
{

        <li class="level1container" />
        <span>@topic.Title</span>
        @Html.Raw("<ul>");
    foreach (var subtopic in topic.SubTopics)
    {
            <li class="listItem">
            <a href="@subtopic.Url" onclick="location.href='@subtopic.Url'">@subtopic.Title</a>
            </li>
    }
        @Html.Raw("</ul>");
        @Html.Raw("</li>");
    }
}

@helper RenderReleaseNotesIndex()
{
foreach (var subTopic in Topic.GetSubTopics("~/docs/Release-Notes"))
{
        <p><a href="@subTopic.Url">@subTopic.Title</a></p>
}

}

