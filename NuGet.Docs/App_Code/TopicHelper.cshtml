@using NuGet.Docs
@helper RenderDocumentationIndex()
{
// Normalize the heading levels to start at 3 in the TOC.
const int minHeading = 3;
// Maximum depth of the index topic-tree
const int maxLevels = 3;

var topics = Topic.GetTopicsWithSubTopics("~/docs");
var orderedList = new List<Topic>();
orderedList.Add(topics.Where(
(a) => { return a.Title == "GetStarted"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Tools"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "FileReference"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "TargetFrameworks"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "API"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Host"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Topics"; }).First());
orderedList.Add(topics.Where(
(a) => { return a.Title == "Contribute"; }).First());
    @RenderIndexTopics(orderedList, minHeading, minHeading + maxLevels);

}

@helper RenderIndexTopics(IEnumerable<Topic> topics, int level, int maxDepth)
{
foreach (Topic topic in topics)
{
        @Html.Raw("<h" + level + ">");
        <a href="@topic.Url">@topic.Title</a>
        @Html.Raw("</h" + level + ">");

        if (level < maxDepth)
        {
            @RenderIndexTopics(topic.SubTopics, level + 1, maxDepth);
        }
    }
}

@helper RenderReleaseNotesIndex()
{
foreach (var subTopic in Topic.GetSubTopics("~/Release-Notes"))
{
        <p><a href="@subTopic.Url">@subTopic.Title</a></p>
}

}

@helper RenderReferencesIndex()
{
const int minHeading = 3;
// Maximum depth of the index topic-tree
const int maxLevels = 3;

var topics = Topic.GetTopicsWithSubTopics("~/references")
    .Where(t => t.SubTopics.Any()
        && !String.Equals(t.Title.ToLowerInvariant(), "release notes"));
    @RenderIndexTopics(topics, minHeading, minHeading + maxLevels);
}

